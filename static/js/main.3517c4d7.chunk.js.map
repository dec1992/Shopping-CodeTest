{"version":3,"sources":["components/Products.js","App.js","index.js"],"names":["Products","useState","products","updateProducts","cart","updateCart","total","updateTotal","1","2","3","4","5","quantities","updateQuantities","handleQuantityChange","event","name","target","value","data","Number","useEffect","axios","get","then","resp","className","slice","map","product","index","src","image","alt","title","length","substring","id","onClick","i","newCart","productIndex","indexOf","push","handleAddToCart","price","type","defaultValue","onChange","min","newTotal","itemQuantity","toFixed","handleTotal","max","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3517c4d7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport axios from \"axios\"\r\n\r\nconst Products = () => {\r\n\r\n  // Store products from API results\r\n\r\n  const [products, updateProducts] = useState([])\r\n\r\n  // Store products in cart\r\n\r\n  const [cart, updateCart] = useState([])\r\n\r\n  // Cart total\r\n\r\n  const [total, updateTotal] = useState(0)\r\n\r\n//   Store Quantities of each product\r\nconst [quantities, updateQuantities] = useState({\r\n    1: 0,\r\n    2: 0,\r\n    3: 0,\r\n    4: 0,\r\n    5: 0,\r\n})\r\n\r\n  // fetch products from API\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://fakestoreapi.com/products`).then((resp) => {\r\n      updateProducts(resp.data)\r\n    });\r\n  }, []);\r\n\r\n  // Add to cart\r\n\r\n  function handleAddToCart(i) {\r\n    const newCart = [...cart]\r\n    const productIndex = i - 1\r\n\r\n    //  Check if product is already in cart before pushing\r\n\r\n    const presentCheck = newCart.indexOf(products[productIndex])\r\n    if (presentCheck < 0) {\r\n      newCart.push(products[productIndex])\r\n      const data = {\r\n        ...quantities,\r\n        [i]: 1\r\n    }\r\n\r\n    updateQuantities(data)\r\n    }\r\n    updateCart(newCart)\r\n  }\r\n\r\n  //  Caculate total\r\n\r\n  function handleTotal() {\r\n    let newTotal = 0;\r\n    for (let i = 0; i < cart.length; i++) {\r\n        const id = cart[i].id\r\n        const itemQuantity = quantities[id]\r\n        const itemPrice = cart[i].price\r\n        const priceToAdd = itemPrice * itemQuantity\r\n      newTotal = newTotal + priceToAdd\r\n    }\r\n    updateTotal(newTotal.toFixed(2))\r\n  }\r\n\r\n  //  Clear Total\r\n\r\n  function handleClear() {\r\n    updateTotal(0);\r\n  }\r\n\r\n//   handle quantity change\r\n\r\n  function handleQuantityChange(event) {\r\n      const name = event.target.name\r\n\r\n      const value = event.target.value\r\n\r\n      const data = {\r\n          ...quantities,\r\n          [name]: Number(value)\r\n      }\r\n\r\n      updateQuantities(data)\r\n  }\r\n\r\n  // Loading screen while fetching products\r\n\r\n  if (!products[0]) {\r\n    return (\r\n      <div className=\"section\">\r\n        <div className=\"container is-fluid\">\r\n          <div className=\"title\">Loading ...</div>\r\n          <progress className=\"progress is-large is-success\" max=\"100\">\r\n            60%\r\n          </progress>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // JSX\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container is-fluid\">\r\n        <div className=\"columns mt-6\">\r\n\r\n            {/* Left Column */}\r\n\r\n\r\n          <div className=\"column is-two-thirds pb-6\">\r\n            <div className=\"container is-fluid\">\r\n              <p className=\"is-size-1 has-text-centered has-text-black pt-3 pb-5\">\r\n                Product List\r\n              </p>\r\n              <div className=\"container\">\r\n                {products.slice(0, 5).map((product, index) => {\r\n                  return (\r\n                    <article\r\n                      className=\"media has-background-success\"\r\n                      key={index}\r\n                    >\r\n                      <figure className=\"media-left\">\r\n                        <p className=\"image is-32x32\">\r\n                          <img src={product.image} alt={product.name}/>\r\n                        </p>\r\n                      </figure>\r\n                      <div className=\"media-content\">\r\n                        <div className=\"content\">\r\n                          <p>\r\n                            {product.title.length < 13\r\n                              ? product.title\r\n                              : product.title.substring(0, 12) + \"...\"}\r\n                          </p>\r\n                          <p>{product.id}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"media-right\">\r\n                        <button\r\n                          onClick={() => handleAddToCart(product.id)}\r\n                          className=\"button is-primary\"\r\n                        >\r\n                          Add to cart\r\n                        </button>\r\n                      </div>\r\n                    </article>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        {/* Right Column */}\r\n\r\n          <div className=\"column is-one-quarter\">\r\n            <p className=\"is-size-1 has-text-centered has-text-black pt-3 pb-5\">\r\n              Cart\r\n            </p>\r\n            <div className=\"container\">\r\n                {!cart[0] && <p>Add a product to your basket</p>}\r\n              {cart.map((product, index) => {\r\n                return (\r\n                  <article className=\"media\" key={index}>\r\n                    <div className=\"media-content\">\r\n                      <div className=\"content\">\r\n                        <p>{product.title.substring(0, 25)}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"media-right\">\r\n                      <p>£{product.price}</p>\r\n                      <input \r\n                        className=\"input\" \r\n                        type=\"number\" \r\n                        defaultValue={quantities[product.id]}\r\n                        name={product.id}\r\n                        onChange={handleQuantityChange}\r\n                        min=\"0\"\r\n                    />\r\n                    </div>\r\n                  </article>\r\n                )\r\n              })}\r\n            </div>\r\n            <div>\r\n              <p className=\"is-size-3 has-text-centered has-text-black pt-5\">\r\n                Total: £{total}\r\n              </p>\r\n              <div className=\"cart-buttons\">\r\n                <button className=\"button\" onClick={() => handleTotal()}>\r\n                  Update Total\r\n                </button>\r\n                <button className=\"button\" onClick={() => handleClear()}>\r\n                  clear\r\n                </button>\r\n              </div>\r\n            </div>\r\n          \r\n          \r\n          \r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Products;\r\n","import React from 'react'\n\nimport Products from './components/Products'\n\n\nimport './App.scss'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Products />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}